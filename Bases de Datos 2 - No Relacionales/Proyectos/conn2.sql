desc PRODUCTS;
SELECT * FROM PRODUCTS;
SELECT *  FROM PRODUCTS WHERE PRODUCT_ID = 66;

desc orders;
SELECT * FROM orders;
SELECT * FROM orders WHERE ORDER_ID = 10;
SELECT * FROM orders WHERE CUSTOMER_ID = 71;

desc order_details;
SELECT * FROM order_details;
SELECT * FROM order_details where ORDER_ID = 12;
SELECT SUM(UNIT_PRICE*QUANTITY) FROM order_details where ORDER_ID = 11046;


SELECT * FROM ORDERS WHERE EXTRACT(YEAR FROM ORDER_DATE) = 2017 AND EXTRACT(MONTH FROM ORDER_DATE) = 07 AND CUSTOMER_ID = 71;
    
SELECT SUM(UNIT_PRICE*QUANTITY) FROM order_details where 
    ORDER_ID IN (SELECT ORDER_ID FROM ORDERS WHERE EXTRACT(YEAR FROM ORDER_DATE) = 2017 AND EXTRACT(MONTH FROM ORDER_DATE) = 07 AND CUSTOMER_ID = 71);
    
SELECT * FROM order_details where 
    ORDER_ID IN (SELECT ORDER_ID FROM ORDERS WHERE EXTRACT(YEAR FROM ORDER_DATE) = 2017 AND EXTRACT(MONTH FROM ORDER_DATE) = 07 AND CUSTOMER_ID = 71);

--PROC_INS_ORDERS(ID_ORDEN IN NUMBER,ID_CLIENTE IN NUMBER,ID_EMPLEADO IN NUMBER,FECHA_ORDEN IN DATE)
EXECUTE PROC_INS_ORDERS(6,71,1,'01/07/2017');
--create or replace PROCEDURE PROC_INS_ORDER_DETAILS(ID_ORDEN IN NUMBER,ID_PRODUCTO IN NUMBER,CANTIDAD IN NUMBER)
EXECUTE PROC_INS_ORDER_DETAILS(6,1,3);









--FUNCIONES, PROCEDIMIENTOS Y TRIGGERS

create or replace FUNCTION FUNC_APLIC_DESCUENTO(id_cliente IN NUMBER, fecha_orden IN DATE)
RETURN NUMBER
IS
cant_compras NUMBER;
mes_orden NUMBER;
ano_orden NUMBER;
descuento NUMBER;
BEGIN
    cant_compras:=0;
    mes_orden:=0;
    ano_orden:=0;
    descuento:=0;

    --EXTRAEMOS EL MES Y EL AÑO DE LA COMPRA
    SELECT EXTRACT(MONTH FROM fecha_orden) INTO mes_orden FROM DUAL; 
    SELECT EXTRACT(YEAR FROM fecha_orden) INTO ano_orden FROM DUAL;

    --ENCONTRAR LA CANTIDAD DE COMPRAS HECHAS POR EL CLIENTE EN EL MES Y AÑO PROPUESTO
    SELECT SUM(UNIT_PRICE*QUANTITY) INTO cant_compras FROM ORDER_DETAILS WHERE 
        ORDER_ID IN (SELECT ORDER_ID FROM ORDERS WHERE 
            EXTRACT(YEAR FROM ORDER_DATE) = ano_orden AND 
            EXTRACT(MONTH FROM ORDER_DATE) = mes_orden AND 
            CUSTOMER_ID = id_cliente);

    --APLICAMOS EL DESCUENTO
    IF cant_compras>=800 THEN
        descuento:=0.4;
    ELSIF cant_compras>=600 THEN
        descuento:=0.3;
    ELSIF cant_compras>=400 THEN
        descuento:=0.2;
    ELSIF cant_compras>=200 THEN
        descuento:=0.1;
    ELSE
        descuento:=0;
    END IF;

    RETURN descuento;
END;



create or replace PROCEDURE PROC_INS_ORDER_DETAILS(ID_ORDEN IN NUMBER,ID_PRODUCTO IN NUMBER,CANTIDAD IN NUMBER)
IS
--VARIABLES A UTILIZAR
fecha_orden DATE;
id_cliente NUMBER;
precio_unit NUMBER;
descuento NUMBER;
BEGIN
    --OBTENEREL MES Y EL AÑO
    SELECT CUSTOMER_ID INTO id_cliente FROM ORDERS WHERE ORDER_ID = ID_ORDEN;   
    SELECT ORDER_DATE INTO fecha_orden FROM ORDERS WHERE ORDER_ID = ID_ORDEN;
    SELECT UNIT_PRICE INTO precio_unit FROM PRODUCTS WHERE PRODUCT_ID = ID_PRODUCTO;

    descuento:=0;
    descuento := FUNC_APLIC_DESCUENTO(id_cliente,fecha_orden);

    --inserto el registro en la tabla ORDER_DETAILS
    INSERT INTO ORDER_DETAILS VALUES (ID_ORDEN,ID_PRODUCTO,precio_unit,CANTIDAD,descuento);
    COMMIT;
END;





create or replace PROCEDURE PROC_INS_ORDERS(ID_ORDEN IN NUMBER,ID_CLIENTE IN NUMBER,ID_EMPLEADO IN NUMBER,FECHA_ORDEN IN DATE)
IS
BEGIN
    --inserto el registro en la tabla ORDERS
    INSERT INTO ORDERS (ORDER_ID,CUSTOMER_ID,EMPLOYEE_ID,ORDER_DATE) VALUES (ID_ORDEN,ID_CLIENTE,ID_EMPLEADO,FECHA_ORDEN);
    COMMIT;
END;





create or replace TRIGGER TRIG_ACTUALIZAR_STOCK_PRODUCTO
AFTER INSERT ON ORDER_DETAILS
FOR EACH ROW
DECLARE
--VARIABLES A UTILIZAR
stock PRODUCTS.UNITS_IN_STOCK%TYPE;
orden PRODUCTS.UNITS_ON_ORDER%TYPE;
BEGIN
    SELECT UNITS_ON_ORDER INTO orden FROM PRODUCTS WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
    SELECT UNITS_IN_STOCK INTO stock FROM PRODUCTS WHERE PRODUCT_ID = :NEW.PRODUCT_ID;

    UPDATE PRODUCTS SET UNITS_IN_STOCK = (stock - :NEW.QUANTITY) WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
    UPDATE PRODUCTS SET UNITS_ON_ORDER = (orden + :NEW.QUANTITY) WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
END;





create or replace TRIGGER TRIG_COMPROBAR_STOCK_PRODUCTO
BEFORE INSERT ON ORDER_DETAILS
FOR EACH ROW
DECLARE
--VARIABLES A UTILIZAR
minimo PRODUCTS.REORDER_LEVEL%TYPE;
stock PRODUCTS.UNITS_IN_STOCK%TYPE;
BEGIN
    --VERIFICAR STOCK
    SELECT REORDER_LEVEL INTO minimo FROM PRODUCTS WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
    SELECT UNITS_IN_STOCK INTO stock FROM PRODUCTS WHERE PRODUCT_ID = :NEW.PRODUCT_ID;
    IF (stock - :NEW.QUANTITY) < minimo THEN
        RAISE_APPLICATION_ERROR (-20343, 'Cantidad del producto excede el mínimo en stock.');
    END IF;
END;





















